const { Telegraf, Markup } = require("telegraf");
const dotenv = require("dotenv").config();
const axios = require("axios");

const bot = new Telegraf(process.env.BOT_TOKEN);

setInterval(async () => {
  try {
    console.log("–û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å");
    const { data } = await axios.get("https://flatsbot1.herokuapp.com/flats/");
    const { data: users } = await axios.get("https://flatsbot1.herokuapp.com/users/all");

    console.log("–ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç");

    if (data.length) {
      for (let flat of data) {
        let photos = flat.photos;
        let photosToSend = [];
        console.log(flat);
        const str = `
${flat.title}
–¶–µ–Ω–∞: ${flat.price}
–ü–ª–æ—â–∞–¥—å: ${flat.space}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: ${flat.rooms}
–õ–æ—Ü–∞–∫–∏—è: ${flat.location}

<a href="${flat.link}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ</a>
            `;

        photos.forEach((photo, idx) => {
          if (idx === 0) {
            photosToSend.push({
              type: "photo",
              media: photo,
              caption: str,
              parse_mode: 'HTML'
            });
          } else {
            photosToSend.push({
              type: "photo",
              media: photo,
            });
          }

          
        });

        if (photosToSend.length > 10) {
          photosToSend.length = 10;
        }

        console.log(photosToSend);

        for (let user of users) {
          await bot.telegram.sendMediaGroup(user.tg_id, photosToSend, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
                    url: flat.link,
                  },
                ],
              ],
            },
          });
        }
      }
    }
  } catch (error) {
    console.log(error);
  }
}, 60000);

bot.start(async (ctx) => {
  try {
    const { data } = await axios.post(
      "https://flatsbot1.herokuapp.com/users/registration",
      { id: ctx.from.id }
    );

    if (data?.isUserWasSaved) {
      return ctx.reply(
        "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
        Markup.keyboard([["–í–∫–ª/–≤—ã–∫–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"], ["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"]]).resize()
      );
    }

    if (data) {
      return ctx.reply(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ! –ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∫–≤–∞—Ä—Ç–∏—Ä –±–æ—Ç –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –≤–∞—Å!",
        Markup.keyboard([["–í–∫–ª/–≤—ã–∫–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"], ["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"]]).resize()
      );
    }
  } catch (error) {
    console.log(error);
    return ctx.reply(
      "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ!",
      Markup.keyboard([["–í–∫–ª/–≤—ã–∫–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"], ["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"]]).resize()
    );
  }
});

bot.hears("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", async (ctx) => {
  try {
    const { data } = await axios.get(
      "https://flatsbot1.herokuapp.com/users/me/" + ctx.from.id
    );

    ctx.replyWithHTML(`
–í–∞—à ID: <code>${data.tg_id}</code> ‚ù£Ô∏è    
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${data.push ? "–≤–∫–ª—é—á–µ–Ω—ã üîâ" : "–≤—ã–∫–ª—é—á–µ–Ω—ã üîá"}
–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <strong>${new Date(
      data.createdAt
    ).toLocaleDateString()}</strong> üïë   
    `);
  } catch (error) {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –º—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
  }
});

bot.hears("–í–∫–ª/–≤—ã–∫–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", async (ctx) => {
  try {
    const { data } = await axios.patch(
      "https://flatsbot1.herokuapp.com/users/me/" + ctx.from.id
    );

    ctx.replyWithHTML(
      `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö ${
        data.push ? "–≤–∫–ª—é—á–µ–Ω—ã üîâ" : "–≤—ã–∫–ª—é—á–µ–Ω—ã üîá"
      }`
    );
  } catch (error) {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –º—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
  }
});
bot.launch();
